{
	"schemaVersion": "4",
	"info": {
		"name": "Kafka Order consumer flow",
		"description": "Example of how to consume messages from a Kafka topic."
	},
	"parameter": {
		"properties": {
			"request": {
				"description": "The request"
			},
			"config": {
				"type": "object",
				"description": "The service's configuration"
			},
			"env": {
				"type": "object",
				"description": "The host OS environment"
			}
		},
		"additionalProperties": false
	},
	"start": "javascript.1",
	"nodes": {
		"javascript.1": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "Message from Kafka topic",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "Data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"console.log('KafkaConsumer flow received message from Kafka topic:', data.request.value);\"",
					"metaName": "Code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises."
				}
			],
			"outputs": {
				"next": {
					"context": "$.result",
					"routes": [
						"account.1"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"kafka.1": {
			"type": "nodehandler://@axway/api-builder-plugin-ft-kafka/kafka",
			"name": "Publish JSON",
			"method": "publishJSON",
			"parameters": [
				{
					"name": "channelId",
					"type": "string",
					"value": "\"kafka-1\"",
					"metaName": "Channel ID",
					"metaDescription": "The Kafka channel ID as configured in triggers/kafka.yml."
				},
				{
					"name": "topic",
					"type": "string",
					"value": "\"payment-events\"",
					"metaName": "Topic",
					"metaDescription": "The topic."
				},
				{
					"name": "message",
					"type": "jsonpath",
					"value": "$.request.value",
					"metaName": "Message",
					"metaDescription": "The message to publish."
				}
			],
			"outputs": {
				"next": {
					"routes": [],
					"metaName": "Next"
				},
				"error": {
					"routes": [],
					"context": "$.error",
					"metaName": "Error"
				}
			},
			"metaMethod": "Publish JSON"
		},
		"account.1": {
			"type": "nodehandler://api-builder-flow-invoke/model/mysql/account",
			"name": "Find by ID",
			"method": "findByID",
			"parameters": [
				{
					"name": "userId",
					"type": "jsonpath",
					"value": "$.request.value.userId",
					"metaName": "userId"
				}
			],
			"outputs": {
				"next": {
					"routes": [
						"condition.1"
					],
					"context": "$.foundByID",
					"metaName": "Next"
				},
				"notfound": {
					"routes": [],
					"metaName": "Not Found"
				},
				"error": {
					"routes": [],
					"context": "$.error",
					"metaName": "Error"
				}
			},
			"metaMethod": "Find by ID"
		},
		"javascript.2": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "Debit Payment",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "Data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"var transactionAmount = data.request.value.price;\\n  var accountBalance = data.foundByID.accountBalance;\\n  console.log(\\\"Transaction Amount \\\" + transactionAmount);\\n  console.log(\\\"Account balance \\\" + accountBalance);\\n  if( accountBalance >= transactionAmount ){\\n    accountBalance = accountBalance - transactionAmount;\\n    data.foundByID.accountBalance = accountBalance;\\n    data.request.value.status = \\\"SUCCESS\\\";\\n    return true;\\n  }\\n  throw new Error('insufficient money');\"",
					"metaName": "Code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises."
				}
			],
			"outputs": {
				"next": {
					"context": "$.result",
					"routes": [
						"account.2"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [
						"javascript.4"
					],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"javascript.3": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "Set status SUCCESS",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "Data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"data.request.value.status = 'PAYMENTSUCCESS';\\n  console.log(data.request.value);\"",
					"metaName": "Code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises."
				}
			],
			"outputs": {
				"next": {
					"context": "$.result",
					"routes": [
						"kafka.1"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"account.2": {
			"type": "nodehandler://api-builder-flow-invoke/model/mysql/account",
			"name": "Update",
			"method": "update",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$.foundByID",
					"metaName": "data"
				},
				{
					"name": "userId",
					"type": "jsonpath",
					"value": "$.request.value.userId",
					"metaName": "userId"
				}
			],
			"outputs": {
				"next": {
					"routes": [
						"javascript.3"
					],
					"context": "$.updated",
					"metaName": "Next"
				},
				"notfound": {
					"routes": [],
					"metaName": "Not Found"
				},
				"error": {
					"routes": [],
					"context": "$.error",
					"metaName": "Error"
				}
			},
			"metaMethod": "Update"
		},
		"javascript.4": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "Set status - REJECTED",
			"method": "Execute",
			"parameters": [
				{
					"name": "code",
					"type": "string",
					"value": "\"data.request.value.status = 'PAYMENTREJECTED';\\n  console.log(data.request.value);\"",
					"metaName": "Code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises."
				},
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "Data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				}
			],
			"outputs": {
				"next": {
					"context": "$.result",
					"routes": [
						"kafka.1"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"condition.1": {
			"type": "nodehandler://axway-flow/condition",
			"name": "Equals PENDING",
			"method": "equals",
			"parameters": [
				{
					"name": "source",
					"type": "jsonpath",
					"value": "$.request.value.status",
					"metaName": "Source",
					"metaDescription": "The input to test."
				},
				{
					"name": "value",
					"type": "string",
					"value": "\"PENDING\"",
					"metaName": "Value",
					"metaDescription": "The value to test input against."
				}
			],
			"outputs": {
				"true": {
					"routes": [
						"javascript.2"
					],
					"context": "$.equals",
					"metaName": "True"
				},
				"false": {
					"routes": [
						"javascript.5"
					],
					"context": "$.equals",
					"metaName": "False"
				}
			},
			"metaMethod": "Equals"
		},
		"javascript.5": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "Credit Payment",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "Data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"var transactionAmount = data.request.value.price;\\n  var accountBalance = data.foundByID.accountBalance;\\n  console.log(\\\"Transaction Amount to be credited\\\" + transactionAmount);\\n  console.log(\\\"Account balance \\\" + accountBalance);\\n \\n  accountBalance = accountBalance + transactionAmount;\\n  data.foundByID.accountBalance = accountBalance;\"",
					"metaName": "Code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises."
				}
			],
			"outputs": {
				"next": {
					"context": "$.result",
					"routes": [],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		}
	}
}